using System;
using System.ComponentModel;
using System.Windows.Forms;

using Visca;

namespace AVDeviceControl
{
    public partial class ucViscaCamera : ucAvDevice
    {
        #region Helper functions
        /// <summary>
        /// FIX FOR "Design mode is not set while in constructor"
        /// https://stackoverflow.com/questions/4498478/designmode-in-subcontrols-is-not-set-correctly
        /// </summary>
        protected bool IsInDesignMode
        {
            get
            {
                return DesignMode || LicenseManager.UsageMode == LicenseUsageMode.Designtime;
            }
        }
        #endregion 

        #region Member Variables, Events, and classes

        PtzController ctl = new PtzController();
        private readonly PtzCamera nullCamera = new PtzCamera(0, null, null);

        private readonly CameraConfig config = new CameraConfig();
        private PtzCamera camera;

        public delegate void DeleteRequest(object sender, EventArgs e);
        public event DeleteRequest RqDelete = null;

        public delegate void MoveRequest(object sender, bool left);
        public event MoveRequest RqMove = null;

        public event ConfigurationChanged configurationChangedEvent = null;
        public event ValueChanged valueChangedEvent = null;
        #endregion

        #region Properties
        double Zoom = 0;
        public PtzCamera Camera { get { return camera; } }

        public override string DeviceName => config.Name;

        public CameraConfig Config
        {
            get { return config; }
            //    set 
            //    { 
            //        config = value;
            //        cameraConfigBindingSource.DataSource = config;
            //    }
        }
        #endregion

        #region Constructors / Form Load
        public ucViscaCamera()
        {
            InitializeComponent();
            if (!IsInDesignMode)
            {
                InitComboLists();
            }
        }


        public ucViscaCamera(CameraConfig config) : this()
        {
            this.config = config;
            // WARNING Checkbox data binding seems to be broken
            // Init here, and modify from check changed event
            chkIp.Checked = config.IsIp;
            cameraConfigBindingSource.DataSource = config;
            lstPresets.Items.AddRange(config.presets.ToArray());
            lstLivePresets.Items.AddRange(config.presets.ToArray());
            Connected = false;
        }

        private void UcViscaCamera_Load(object sender, EventArgs e)
        {
            grpPresets.Enabled = false;
            cmbPresetSpeed.DataSource = Enum.GetValues(typeof(Preset.PtSpeed));
        }

        /// <summary> 
        /// Clean up any resources being used.
        /// 
        /// MOVED FROM DESIGNER (where it was originally autogenerated)
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            ctl.Disconnect();
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        #endregion

        #region Control Initialization
        private void InitComboLists()
        {
            cmbBaud.Items.Clear();
            int[] bauds = SerialViscaConfig.BaudRates;
            foreach (int item in bauds)
            {
                cmbBaud.Items.Add(item);
            }

            RefreshPorts();
        }

        void RefreshPorts()
        {
            String selected = cmbComPort.SelectedItem as string;
            String[] items = SerialViscaConfig.SerialPorts;

            cmbComPort.Items.Clear();

            foreach (string item in items)
            {
                cmbComPort.Items.Add(item);
            }
            cmbComPort.SelectedItem = selected;
        }
        #endregion

        #region AvDevices
        public override void SetSize(int clientHeight)
        {
            double pt_y = ptControl.Height + clientHeight - Height;
            double pt_x = pt_y * ptControl.Width / ptControl.Height;
            Size = new System.Drawing.Size((int)pt_x + Width - ptControl.Width, clientHeight);
        }
        override public void ConfigureMoveable(bool left, bool right)
        {
            btnLeft.Visible = left;
            btnRight.Visible = right;
        }

        override public String Connect()
        {
             return (String)Invoke(new Action(() => { ExecConnect(!config.IsIp); }));
            //return ExecConnect(serial);
        }
        #endregion

        #region Camera Control
        public String ExecConnect(bool serial)
        {
            Disconnect();
            // Connect to PtzController and camera
            String error = ctl.Connect(serial, config);
            if (error == null)
            {
                // Connect the camera to this user control
                camera = ctl.Camera;
                camera.ZoomPositionChanged += Camera_ZoomPositionChanged;
                camera.PTZPositionChanged += Camera_PTZPositionChanged;
                cameraBindingSource.DataSource = camera;
                Connected = true;
            }
            return error;
        }
        public void Disconnect()
        {
            Invoke(new Action(() => { ExecDisconnect(); }));
        }
        public void ExecDisconnect()
        {
            ctl?.Disconnect();
            camera = null;
            Connected = false;
        }

        bool isConnected = false;
        bool Connected
        {
            get { return isConnected; }
            set
            {
                tabControl1.Visible = false;
                tabControl1.TabPages.Clear();
                if (value)
                {
                    if (!isConnected)
                    {
                        isConnected = value;
                        tabControl1.TabPages.Add(tabCamControl);
                        tabControl1.TabPages.Add(tabPresets);
                        //tabControl1.TabPages.Add(tabSettings);
                        cameraBindingSource.DataSource = camera;
                        ucCamSettings1.Binding = cameraBindingSource;
                        configurationChangedEvent?.Invoke(this);
                    }
                }
                else
                {
                    bool wasConnected = isConnected;
                    isConnected = value;
                    // Alway update control when not connected
                    // May be a change to "IsIp";
                    if (config.IsIp)
                    {
                        tabControl1.TabPages.Add(tabIpCam);
                        tabControl1.SelectedTab = tabIpCam;
                    }
                    else
                    {
                        tabControl1.TabPages.Add(tabUsbCam);
                        tabControl1.SelectedTab = tabUsbCam;
                    }
                    if (wasConnected)
                    {
                        configurationChangedEvent?.Invoke(this);
                    }
                }
                btnLeft.Visible = !value;
                btnRight.Visible = !value;
                tabControl1.Visible = true;
                btnCtlDisconnect.Visible = isConnected;
                chkIp.Visible= !isConnected;
            }
        }
        #endregion

        #region Control Events

        #region Button and checkbox events
        private void BtnConnectIp_Click(object sender, EventArgs e)
        {
            String error = Connect();
            if (error != null)
            {
                MessageBox.Show(error, "Failed to control camera");
            }
        }

        private void BtnConnectSerial_Click(object sender, EventArgs e)
        {
            String error = Connect();
            if (error != null)
            { 
                MessageBox.Show(error, "Failed to control camera");
            }
        }

        private void btnCtlDisconnect_Click(object sender, EventArgs e)
        {
            Disconnect();
        }

        private void BtnDelete_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Are you sure you want to remove this camera?",
                "Deleting Device", MessageBoxButtons.YesNo)
                == DialogResult.Yes)
            {
                RqDelete?.Invoke(this, new EventArgs());
            }
        }

        private void BtnNewPreset_Click(object sender, EventArgs e)
        {
            Preset p = config.AddPreset("unnamed", ptControl.AnglePan, 
                ptControl.AngleTilt, Zoom, Preset.PtSpeed.NOT_SET);
            lstPresets.Items.Add(p);
            lstPresets.SelectedItem = p;
            lstLivePresets.Items.Add(p);
            txtPresetName.Focus();
        }

        private void btnPresetUpdate_Click(object sender, EventArgs e)
        {
            if (lstPresets.SelectedItem != null)
            {
                Preset p = lstPresets.SelectedItem as Preset;
                p.Pan = ptControl.AnglePan;
                p.Tilt = ptControl.AngleTilt;
                p.Zoom = Zoom;
                presetsBindingSource.ResetBindings(false);
                //presetsBindingSource.DataSource = p;
            }
        }

        private void BtnDelPreset_Click(object sender, EventArgs e)
        {
            if (lstPresets.SelectedItem != null)
            {
                config.RemovePreset(lstPresets.SelectedItem as Preset);
                // Be sure to remove live one first
                lstLivePresets.Items.Remove(lstPresets.SelectedItem);
                lstPresets.Items.Remove(lstPresets.SelectedItem);
                presetsBindingSource.DataSource = new Preset();
                grpPresets.Enabled = false;
                configurationChangedEvent?.Invoke(this);
            }
        }

        private void BtnRefreshPorts_Click(object sender, EventArgs e)
        {
            RefreshPorts();
        }

        private void btnLeft_Click(object sender, EventArgs e)
        {
            RqMove?.Invoke(this, true);
        }

        private void btnRight_Click(object sender, EventArgs e)
        {
            RqMove?.Invoke(this, false);
        }

        private void ChkIsIp_CheckedChanged(object sender, EventArgs e)
        {
            config.IsIp = (sender as CheckBox).Checked;
            Connected = isConnected;
        }
        #endregion

        #region PTZ Input events
        private void TbZoom_MouseUp(object sender, MouseEventArgs e)
        {
            tbZoom.Value = 0;
        }

        private void TbZoom_ValueChanged(object sender, EventArgs e)
        {
            if (camera != null)
            {
                decimal fraction = tbZoom.Value * 2 / (tbZoom.Maximum - tbZoom.Minimum);
                int zoomSpeed = (int)(fraction * fraction * camera.Limits.ZoomSpeedLimits.High);
                camera.ContinuousZoom(Math.Sign(fraction) * zoomSpeed);
            }
        }

        private void PtControl_ValueChanged(object sender, ucPtControl.Data data)
        {
            if (camera != null)
            {
                double panFraction = data.value.X * 2.0 / data.Range_X;
                int panSpeed = (int)(panFraction * camera.Limits.PanSpeedLimits.High);
                double tiltFraction = data.value.Y * 2.0 / data.Range_Y;
                int tiltSpeed = (int)(tiltFraction * camera.Limits.TiltSpeedLimits.High);
                camera.ContinuousPanTilt(panSpeed, tiltSpeed);
            }
        }
        #endregion

        #region Preset control events
        private void TextBox2_Leave(object sender, EventArgs e)
        {
            // THIS IS BAD but it seems to work

            if (lstPresets.SelectedItem != null)
            {
                // Set the name property manually becuase this event fires first
                (lstPresets.SelectedItem as Preset).Name = txtPresetName.Text;

                object lstItem = lstPresets.SelectedItem;
                lstPresets.Items.Clear();
                lstPresets.Items.AddRange(config.presets.ToArray());
                lstPresets.SelectedItem = lstItem;

                lstLivePresets.Items.Clear();
                lstLivePresets.Items.AddRange(config.presets.ToArray());
                configurationChangedEvent?.Invoke(this);
            }
        }

        private void LstLivePresets_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lstLivePresets.SelectedItem is Preset p)
            {
                if (camera != null && p.Pan != ptControl.AnglePan || p.Tilt != ptControl.AngleTilt)
                {
                    camera.MoveToPreset(p, config);
                }
                lstLivePresets.SelectedItem = null;
            }
        }

        private void LstPresets_SelectedValueChanged(object sender, EventArgs e)
        {
            if (lstPresets.SelectedItem is Preset p)
            {
                presetsBindingSource.DataSource = p;
                grpPresets.Enabled = true;
            }
        }
        #endregion

        #region Tab control vents
        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            cameraBindingSource.DataSource = nullCamera;
            if (camera != null)
            {
                cameraBindingSource.DataSource = camera;
            }
        }
        #endregion

        #region Camera events
        private void Camera_PTZPositionChanged(object sender, ViscaCamera.PTZPositionEventArgs e)
        {
            camera?.EndTrack();
            ptControl.AnglePan = ((short)e.PanPosition) / config.CountsPerDegree;
            ptControl.AngleTilt = ((short)e.TiltPosition) / config.CountsPerDegree;
            Console.WriteLine("Position: Pan = " + (int)ptControl.AnglePan 
                + ", Tilt = " + (int)ptControl.AngleTilt); 
        }

        private void Camera_ZoomPositionChanged(object sender, ViscaCamera.PositionEventArgs e)
        {
            camera?.EndTrack();
            Zoom = e.Position / config.FullScaleZoom;
            ptControl.ZoomFraction = (float)Zoom;
            Console.WriteLine("Position Zoom = " + (int)(ptControl.ZoomFraction * 100) + "%");
        }

        private void cameraConfigBindingSource_CurrentItemChanged(object sender, EventArgs e)
        {
            configurationChangedEvent?.Invoke(this);
        }
        #endregion

        #endregion
    }
}
